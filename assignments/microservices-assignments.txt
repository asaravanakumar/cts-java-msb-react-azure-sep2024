
ASSIGNMENT 05: Service Discovery with Eureka
**Objective:** Implement service discovery using Spring Cloud Eureka.

**Tasks:**
1. Create a Eureka server.
2. Modify the Product service to register with the Eureka server.
3. Create a second service (e.g., `Order` service) and register it with Eureka.
4. Implement a simple communication between the `Product` and `Order` services using Eureka with LoadBalancer/OpenFeign

ASSIGNMENT 06: API Gateway with Spring Cloud Gateway
**Objective:** Set up an API Gateway to route requests.

**Tasks:**
1. Create an API Gateway Spring Cloud Gateway.
2. Configure routes to the `Product` and `Order` services.
3. Configure LoadBalancer for the API Gateway to access the services

ASSIGNMENT 07: Circuit Breaker Pattern with Resilience4j
**Objective:** Implement fault tolerance using circuit breakers.

**Tasks:**
1. Integrate Resilience4j into one of your microservices (e.g., the `Order` service).
2. Implement a circuit breaker for a call to the `Product` service.
3. Simulate a failure in the `Product` service and observe the behavior of the `Order` service.

ASSIGNMENT 08: Configuration Management with Spring Cloud Config
**Objective:** Centralize configuration management.

**Tasks:**
1. Set up a Spring Cloud Config server.
2. Store configurations for the `Product` and `Order` services in a Git repository.
3. Modify the services to fetch their configurations from the Config server.


ASSIGNMENT 09: Messaging with Kafka
**Objective:** Implement asynchronous communication.

**Tasks:**
1. Integrate Kafka with Spring Boot to enable asynchronous communication between the services
2. Enhance the product service to send messages on 'product-events' topic when a new product is created 
3. Create a notification-service that listens for product creation events and logs them.

ASSIGNMENT 10: Handling Distributed Transactions with Saga Pattern
**Objective:** Implement a Saga pattern for managing distributed transactions.

**Tasks:**
1. Define a business process that requires coordination between multiple microservices (e.g., creating an order that requires product availability).
2. Implement a Saga using either the choreography or orchestration approach.
3. Handle compensation logic for rollback scenarios.

### Assignment 11: Security with JWT
**Objective:** Secure your Microservices using JWT.

**Tasks:**
1. Set up Spring Security Auth Service to issue JWT tokens
2. Secure Product Service with JWT token based authentication

### Assignment 12: Containerize above registry-service, product-service and gateway-service and upload into DockerHub Account

### Assignment 13: Deploy the containerized microservices into K8s

### Assignment 14: Create GraphQL API to Query and Mutate Account details

### Assignment 15: Setup Jenkins Pipleline Job to automate the GraphQL API build and package and publish test results.
