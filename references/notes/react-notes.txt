Single Page App (SPA) Characteristics (7)
---------------
  1. Pages should Not Refresh 
  2. URL should be changed 
  3. History should be maintained without Page Refresh 
  4. Header and Footer should be intact. 
  5. The section in between header and footer should be updated 
  6. Active Menu should be set 
  7. Page Title should also be changed 
      
  Refer: learn about react-helmet in npmjs.com 



  SPA Frameworks / Libraries 
  ---------------------------
    #1 React JS (Library) 
    #2 Angular (Framework)
    #3 VueJS (Framework)
    #4 Svelte (Framework)



ReactJS 
---
  1. Quick Intro 
  2. React React Project 
      * file walkthru 
      * how react apps are running? 
          npm start 

  3. Components
  4. JSX 
  5. Props
  6. States
  7. Events
  8. Lists and Keys
  9. Conditional Rendering
  10. Styles


  11. Routing
  12. Integrating third party tools (bootstrap) 
  13. REST API (CRUD)
  15. Context API
  16. React Forms (React Hook Form)
  17. Build and Deployment


==========


Thinking in React
---
 0. Find out the number of components 
 1. Break UI into component hierarchy
 2...
 3... 
 
 
 Components
--------- 
  * Reusable block of code 
  * made up of JS, JSX and CSS (optional)
  
  1. Functional Components  (shared comps should be created in src/components )
      * coded with functions 
      1.1 Functional Components with Named Function
      1.2 Functional Components with Anonymous Function
      1.3 Functional Components with Arrow Function [RECOMMENDED]

      Till v16.7 (before 2018)
      ----  
        * fn components did not have state. 
        * fn components did not have lifecycle hooks

      After v16.8 (after 2018)
      ----
        * fn components can have state. 
        * fn components can have life cycle hooks kind of alternatives. 

  2. Class Components   (shared class components should be created in src/containers )
      * coded as Object oriented class 
      * will have lifecycle hooks 

Install Chrome Extn:
 https://chromewebstore.google.com/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi
 
JSX Limitations
---
  * it will look like HTML. But not HTML 
  * you can use any html tag in JSX. But certain attributes would differ. 
  * JSX elements must be closed. either self-closed, or separately closed 
  * class attribute should become className

Data Binding 
---
  * keep the data in a variable inside a component and display it in JSX of the comp 

  1. One Way Binding
      * JSX can merely display the data of the variable. 

  2. Two Way Binding 
      * keep the data in a variable and display it in JSX 
        then, update the data in a variable and see the changes in JSX 


Cross Component Communication / Sharing data b/w components 
--------------------
  1. Parent to Child Component Communication
      Using Props 

  2. Child to Parent Component Communication
      Using Props with callback fn and event handler
  
  3. Any to Any Component Communication 
      3.1 Using React Context API (after 2019 -- React JS v16.8)
      3.2 Using ReduxJS / Zustand/ Flux / MobX / Recoil 


Concepts
-------
  Data Binding
  Props
  States
  Events
  Lists and Keys
  Conditionals


Project Structure
----
  src/
    components/ 
      Header/
        Header.js 
      Footer/
        Footer.js 
    containers/
    pages/    (or features/)
      HomePage/
        LatestVideo/
          LatestVideo.js 
        HomePage.js
      HooksDemoPage/ 
      HocDemoPage/
      AboutUsPage/
      ContactUsPage/
    hoc/
    

3 Ways to integrate bootstrap 
--
  1. original bootstrap 
      https://create-react-app.dev/docs/adding-bootstrap/
  2. react-bootstrap
      npm i react-bootstrap
  3. reactstrap 
      npm i reactstrap 

Naming Conventions & Casing 
----
  Casing Types 
  --------
    1. PascalCase 
        * Recommended for Object Oriented Program's classes 
        * also Recommended for Interface in Java & TypeScript 
        * all react components should be named in PascalCase
        * all components folder should be of this type 

        examples 
        ---
          class CarDetails {

          }

          interface Employee {

          }

    2. camelCase 
        * Recommended for variables, const, functions, methods in JS & TS 
        * Recommended for id's of html or JSX elements 

        examples 
        -----
          var myCar = 'BMW';

          function getCarInfo() {
            //....
          }
    
    3. kebab-case
        * Recommended for URLs 
        * Recommended for file names, folder names (if not react), assets in front end projects 
        * Recommended for css classes 
        * okay for id's of html elements if your architect says okay

        examples 
        -----
          btn-primary
          slideshow-container 
          youtube-logo.png 

    4. snake_case
        * never ever use this. 
        * okay for const in JS & TS if architect accepts

        examples
        ---
          const MAX_STUDENTS_PER_CLASS = 30;





